# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, QGIS project
# This file is distributed under the same license as the QGIS Documentation Project package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation Project 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-03-07 10:27\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

# ba47ee7f05084cc99d3e38cb9a30cb18
#: ../../source/api-docs/safe/storage/test_io.rst:6
msgid "Module:  safe.storage.test_io"
msgstr ""

# fec9a63bfc084f298b398d15b9c62c89
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO:1
msgid "Tests for reading and writing of raster and vector data"
msgstr ""

# e4616b39fa53447f8ea2e224bd132731
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.Xtest_reading_and_writing_of_multiband_rasters:1
msgid "Multiband rasters can be read and written correctly"
msgstr ""

# fca70c456bd244259b61f58691937f2c
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.Xtest_reading_and_writing_of_sqlite_vector_data:1
msgid "SQLite vector data can be read and written correctly"
msgstr ""

# 368c95f42a504c2cb8109f33ddc25cde
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_3d_polygon:1
msgid "3D polygons can be read correctly with z component dismissed"
msgstr ""

# 676dd0ae95204765abac80c768fb8c8d
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_3d_polygon:3
msgid ""
"3D polygons are a specialisation of '2d' polygons which assigns a 'z' to "
"each vertex (wkbPolygon25D in ogr parlance). It's normally referred to as "
"2.5D since the format does not truly represent volumetric spaces"
msgstr ""

# d2a50d688bb1442585512b8534c841b9
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_3d_polygon:8
msgid ""
"This test verifies that such polygons can be read as 2d - i.e. with the "
"third dimension removed."
msgstr ""

# e0db485e4c0847278c38261275b9a497
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_3d_polygon:11
msgid ""
"ogrinfo reports this for 25d polygons: INFO: Open of `../inasafe_data/"
"test/25dpolygon.shp' using driver `ESRI Shapefile' successful. 1: 25dpolygon "
"(3D Polygon)"
msgstr ""

# f9f3149bf89448ff82b5532c22c5ae3b
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_analysis_of_vector_data_top_N:1
msgid "Analysis of vector data - get top N of an attribute"
msgstr ""

# 1655b122ba6e4708ad679a8d047bd78e
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_array2wkt:1
msgid "Conversion to wkt data works"
msgstr ""

# e9af32c0d9aa4fe895be17cb15da7777
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_array2wkt:4
msgid "'POLYGON((0 1, 2 3, 4 5, 6 7, 8 9))'"
msgstr ""

# b846ae9284c8493f822ed3aa7839590f
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_attribute_types:1
msgid "Different attribute types are handled correctly in vector data"
msgstr ""

# 15de8342d8824a92823abaa166214695
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_bad_ascii_data:1
msgid "ASC raster files with bad data causes good error message"
msgstr ""

# f593b9ea4bb24c7d99ead383cb0efe5e
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_bad_ascii_data:3
msgid "This example is courtesy of Hyeuk Ryu"
msgstr ""

# 6f2a4ddd7aa14466af86e4f6b7c9f9e1
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_bins:1
msgid "Linear and quantile bins are correct"
msgstr ""

# c4557f90ff2740fb8461002397ab968b
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_bounding_box_conversions:1
msgid "Bounding boxes can be converted between list and string"
msgstr ""

# da5e819710494094afa18192d1da23d3
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_bounding_box_intersection:1
msgid "Intersections of bounding boxes work"
msgstr ""

# 0f5e01d73bff4921941106a3753c9b30
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_buffered_bounding_box:1
msgid "Bounding box can be buffered"
msgstr ""

# 022342a5ca0749c3ace9c958a8a7f558
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_centroids_from_polygon_data:1
msgid "Centroid point data can be derived from polygon data"
msgstr ""

# 5d1b3cd694e9487c92604d85f56214a7
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_centroids_from_polygon_data:3
msgid ""
"Test against centroid data generated by QGIS: shapefiles with a _centroids."
"shp suffix."
msgstr ""

# d147138747bc4d5d87879112318896f9
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_compatible_projections:1
msgid "Projections that are compatible but not identical are recognised"
msgstr ""

# 0759066255bd48a09f16c8f894360b29
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_compatible_projections:3
msgid "This is a test for issue #304"
msgstr ""

# d373a1d1537a40cc9ae844be60afc4bc
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_donut_polygons:1
msgid "Donut polygon can be read, interpreted and written correctly"
msgstr ""

# da08283a846547d29e6bf62cc013206d
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_empty_keywords_file:1
msgid "Empty keywords can be handled"
msgstr ""

# 9edbfbeba15b4c5f8124703ff7b9b8ba
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_geotransform2bbox:1
msgid "Bounding box can be extracted from geotransform"
msgstr ""

# 3cce6bde62d74e6cb18fa735c03f0a88
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_geotransform2resolution:1
msgid "Resolution can be extracted from geotransform"
msgstr ""

# 101fea040bb24a95925791efcca82a4f
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_get_bounding_box:1
msgid "Bounding box is correctly extracted from file."
msgstr ""

# ec3bc9ef76d24ea09e3d840c36733202
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_get_bounding_box:3
msgid "Reference data::"
msgstr ""

# 76bf9f7a60b24efabd04241dcc540e60
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_get_bounding_box:44
msgid "( 99d21'36.00\"E,  0d 0' 0.01\"N)"
msgstr ""

# e9da392329a94d838795ae23d917ab68
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_get_bounding_box:46
msgid "( 99d21'36.00\"E,  2d11'56.40\"S)"
msgstr ""

# d598d39b9e4c4de581a64d22fcdc63c1
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_get_bounding_box:48
msgid "(102d14'13.20\"E,  0d 0' 0.01\"N)"
msgstr ""

# 163377a6de844799b65d3bb44980b4b1
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_get_bounding_box:50
msgid "(102d14'13.20\"E,  2d11'56.40\"S)"
msgstr ""

# 91e1827d603a4a2595b37e0b65a5f623
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_get_bounding_box:52
msgid "(100d47'54.60\"E,  1d 5'58.20\"S)"
msgstr ""

# 49edf6fe0fba408ea2bde774c943169c
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_i18n:1
msgid ""
"Test to see if internationalisation is working correctly. Make sure to "
"include this file when using xgettext to scan for translatable strings. .. "
"see:: :doc:`/developer-docs/i18n`"
msgstr ""

# 00dec14800264d36a71e4abf47215750
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_instantiation_of_empty_layers:1
msgid "Vector and Raster objects can be instantiated with None"
msgstr ""

# c561aea8bb7e4adcba1a6c6233e04efa
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_keywords_file:1
msgid "Keywords can be written and read"
msgstr ""

# 3751e58af96e4933a220b43afd0b48b3
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_keywords_with_colon:1
msgid "Keywords and values with colons raise error messages"
msgstr ""

# dcb1d51da83c4b65800b5ff7df26d425
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_layer_API:1
msgid "Vector and Raster instances have a similar API"
msgstr ""

# afc19a6665ee45ba89f3b6a083b0bd33
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_line_to_points:1
msgid "Points along line are computed correctly"
msgstr ""

# f6b3720987144f7f92491b0223e62c6f
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_minimal_bounding_box:1
msgid "Bounding box minimal size can be controlled"
msgstr ""

# f1f7427530f447759cc7cd6fac4ef282
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_multipart_polygon_can_be_read:1
msgid "Multipart polygons are be converted to singlepart"
msgstr ""

# a75a1fea535b49efae94b3de46deb10a
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_no_projection:1
msgid "Raster layers with no projection causes Exception to be raised"
msgstr ""

# 9ab6c44608444279b4fa4e6d814ed067
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_nodata_value:1
msgid "NODATA value is correctly handled for GDAL layers"
msgstr ""

# 6f98ff66e5aa420eba11b53f452b48f9
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_ordering_polygon_vertices:1
msgid "Ordering of polygon vertices is preserved when writing and reading"
msgstr ""

# e2fa33735bc749a2879f74dcec68def3
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_polygon_area:1
msgid "Polygon areas are computed correctly"
msgstr ""

# 0927d05905b14614b3c48f1c1290430b
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_polygon_centroids:1
msgid "Polygon centroids are computed correctly"
msgstr ""

# 847047ff8bb34f8a8cf767aa40902e8d
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_polygons_with_inner_rings:1
msgid "Polygons with inner rings can be written and read"
msgstr ""

# 32c84885976e4b778d03802821db6812
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_projection_comparisons:1
msgid "Projection information can be correctly compared"
msgstr ""

# 5900e8b3f352494f9ba905eb4d0fd1a4
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_raster_extrema:1
msgid "Raster extrema (including NAN's) are correct."
msgstr ""

# b46fd4ea95b54befb824aa7848112e93
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_raster_to_vector_points:1
msgid "Raster layers can be converted to vector point layers"
msgstr ""

# 87d3a9efc9f249d1a9574a40adebd551
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_raster_to_vector_points2:1
msgid "Raster layers can be converted to vector point layers (real data)"
msgstr ""

# f83eb89368344e56b782600b7aa4e936
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_raster_to_vector_points2:3
msgid "# See qgis project in test data: raster_point_and_clipping_test.qgs"
msgstr ""

# 3d49223e42024c129037b31a4561af28
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_rasters_and_arrays:1
msgid "Consistency of rasters and associated arrays"
msgstr ""

# dd84d05615bf4c0f8fd572d188629909
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_rasters_created_with_projected_srs:1
msgid "Rasters can be created from arrays in projected coordinates"
msgstr ""

# 0ca14d69583a4518ba907c9a78009a5a
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_reading_and_writing_of_real_rasters:1
msgid "Rasters can be read and written correctly in different formats"
msgstr ""

# c6ef2a24c6b64b6490673acc69623d90
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_reading_and_writing_of_vector_line_data:1
msgid "Vector line data can be read and written correctly"
msgstr ""

# 729eb753e7fc4c2e983258ce6262c096
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_reading_and_writing_of_vector_point_data:1
msgid "Vector point data can be read and written correctly"
msgstr ""

# 48d318c0b14f4b69b026468422122867
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_reading_and_writing_of_vector_polygon_data:1
msgid "Vector polygon data can be read and written correctly"
msgstr ""

# 02606c37b58f4554b4ca0d595b87d6ce
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_vector_class:1
msgid "Consistency of vector class for point data"
msgstr ""

# a8e52295cad3436fa338c60dbc9e3b7c
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_vector_class_geometry_types:1
msgid "Admissible geometry types work in vector class"
msgstr ""

# 0c62fb1006674d8fbf086bf4b9c2831e
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_vector_class_geometry_types:3
msgid "Also check that reported bounding boxes are correct"
msgstr ""

# 6081fd41806a4ed68fef38ec7f171b5a
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_vector_extrema:1
msgid "Vector extremum calculation works"
msgstr ""

# c7a39daf104f48559204d93f58fa6c69
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_vector_feature_count:1
msgid "Number of features read from vector data is as expected"
msgstr ""

# 62a93bd185e048498d282ef39b9e0e03
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.linear_function:1
msgid "Auxiliary function for use with raster test"
msgstr ""

# 97df50837bb849a7a6777351ae1c0e38
#: ../../source/api-docs/safe/storage/test_io.rst:11
msgid "This module forms part of the `InaSAFE <http://inasafe.org>`_ tool."
msgstr ""
