# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, QGIS project
# This file is distributed under the same license as the QGIS Documentation Project package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation Project 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-03-07 10:27\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

# fc5d8f9444814e878e020efeab49a5c5
#: ../../source/api-docs/safe/common/polygon.rst:6
msgid "Module:  safe.common.polygon"
msgstr ""

# 80558a18d3a14f12b4dc4033f269e636
#: ../../../safe/common/polygon.py:docstring of safe.common.polygon:1
msgid "**Polygon, line and point algorithms.**"
msgstr ""

# 8d7bd9d202b940698d4375aa06f24fd5
#: ../../../safe/common/polygon.py:docstring of safe.common.polygon:5
msgid ""
"separate_points_by_polygon: Fundamental clipper intersection: Determine "
"intersections of lines"
msgstr ""

# f06337ebb46045cd8875a191087ef66d
#: ../../../safe/common/polygon.py:docstring of safe.common.polygon:9
msgid ""
"inside_polygon is_inside_polygon outside_polygon is_outside_polygon "
"point_on_line"
msgstr ""

# b263a40cb36c499ab4e530ffac9e0deb
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_grid_by_polygons:1
msgid "Clip raster grid by polygon."
msgstr ""

# bef34592f3c9498bb854a04fb8abdb56
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_grid_by_polygons:4
msgid "A: MxN array of grid points"
msgstr ""

# da3fbe3f2b1c4b59b4ec755a742e729f
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_grid_by_polygons:6
msgid ""
"(top left x, w-e pixel resolution, rotation, top left y, rotation, n-s pixel "
"resolution)"
msgstr ""

# 5abdc8edf9214969818564cc7a500080
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_grid_by_polygons:8
msgid "polygons: list of polygon geometry objects or list of polygon arrays"
msgstr ""

# 52a0a1024c9f416fb555db3cce036d24
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_grid_by_polygons:11
msgid "points_covered: List of (points, values) - one per input polygon."
msgstr ""

# ceee336b4d214325ae02c16ee7a21491
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_grid_by_polygons:13
msgid ""
"Implementing algorithm suggested in https://github.com/AIFDR/inasafe/"
"issues/91#issuecomment-7025120"
msgstr ""

# 22ab8d0b735546c597938b15b3e93219
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_grid_by_polygons:16
msgid ""
"Grid points are considered to be pixel-registered which means that each "
"point represents the center of its grid cell. The required half cell shifts "
"are taken care of by the function :func:`geotransform2axes`."
msgstr ""

# 1523d025d7db485dbb78512d94877452
# e74ba69393184c9380e25df84e4cd82c
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_grid_by_polygons:21
#: safe.common.polygon.clip_lines_by_polygons:20
msgid "If multiple polygons overlap, the one first encountered will be used."
msgstr ""

# f260fcdcb0414e5d86fe8ef7b2b688b1
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_line_by_polygon:1
msgid "Clip line segments by polygon"
msgstr ""

# 1c9018cc234b44c09161806321e8f71a
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_line_by_polygon:5
msgid "the equivalent Nx2 numpy array"
msgstr ""

# 28c5a8defee64edb958b5db0e183c838
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_line_by_polygon:6
msgid ""
"polygon: list or Nx2 array of polygon vertices closed: (optional) determine "
"whether points on boundary should be regarded as belonging to the polygon "
"(closed = True) or not (closed = False) - False is not recommended here "
"polygon_bbox: Provide bounding box around polygon if known."
msgstr ""

# 0a6a704cfaea4b1ba16de6cb75660aec
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_line_by_polygon:11
msgid "This is a small optimisation"
msgstr ""

# efa52ec0dc73427eb7d634bfd2a35824
# 949b08a5f10c47aba1824a2084b34737
# 03402c54ad584872b0be5eaa844b4fd1
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_line_by_polygon:12
#: safe.common.polygon.clip_lines_by_polygon:13
#: safe.common.polygon.separate_points_by_polygon:13
msgid "check_input: Allows faster execution if set to False"
msgstr ""

# 0816930ebb5f41df9b747d89066e1d10
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_line_by_polygon:15
msgid ""
"inside_lines: Clipped lines that are inside polygon outside_lines: Clipped "
"lines that are outside polygon"
msgstr ""

# 678fed3256314f1593abbe1249d889c8
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_line_by_polygon:18
msgid ""
"Both outputs lines take the form of lists of Nx2 numpy arrays, i.e. each "
"line is an array of multiple segments"
msgstr ""

# 1c7cf004bac64f19a7d9ce2734f7d1d0
# 0766cb302d9b4fcc9b04543061ef2f15
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_line_by_polygon:21
#: safe.common.polygon.separate_points_by_polygon:24
msgid "Example:"
msgstr ""

# 851eb79b11db43eebaa47b713e30462d
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_line_by_polygon:23
msgid "U = [[0,0], [1,0], [1,1], [0,1]]  # Unit square"
msgstr ""

# d7f775ef1cfa4d2d89fa31f07c69296c
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_line_by_polygon:25
msgid ""
"# Simple horizontal fully intersecting line line = [[-1, 0.5], [2, 0.5]]"
msgstr ""

# 07ad3abf9c6f48d896e86fa982b97842
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_line_by_polygon:28
msgid ""
"inside_line_segments, outside_line_segments =             "
"clip_line_by_polygon(line, polygon)"
msgstr ""

# 9c5c1e45198d42c1a78109163a7e3186
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_line_by_polygon:31
msgid "[[[0, 0.5], [1, 0.5]]])"
msgstr ""

# 6d3defe868bc4d4c94aa3f5aec23248a
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_line_by_polygon:35
msgid "[[1, 0.5], [2, 0.5]]])"
msgstr ""

# 52c1291071e742e88e295eb4ca4e1f67
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_line_by_polygon:38
msgid "The assumptions listed in separate_points_by_polygon apply"
msgstr ""

# a2c2b3cabe0545818f71a5f09b1b5017
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_line_by_polygon:40
msgid "Output line segments are listed as separate lines i.e. not joined"
msgstr ""

# dbb281967a1045dabcc824854e83e625
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_lines_by_polygon:1
msgid "Clip multiple lines by polygon"
msgstr ""

# 729fe59bb093403c8017f5b61f46eceb
# 6079abf5eb46489d98328258728223f6
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_lines_by_polygon:5
#: safe.common.polygon.clip_lines_by_polygons:5
msgid "where pi and qi are point coordinates (x, y)."
msgstr ""

# 8657a94799154c2ebd08ec4bfff0f4ea
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_lines_by_polygon:6
msgid ""
"polygon: list or Nx2 array of polygon vertices closed: (optional) determine "
"whether points on boundary should be"
msgstr ""

# cb19f095e0bf4e159a549828648154c8
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_lines_by_polygon:8
msgid ""
"regarded as belonging to the polygon (closed = True) or not (closed = False) "
"- False is not recommended here This parameter can also be None in which "
"case it is undefined whether a line on the boundary will fall inside or "
"outside. This will make the algorithm about 20% faster."
msgstr ""

# 973391676dfe4664b18ee89138579c9e
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_lines_by_polygon:16
msgid ""
"inside_lines: Dictionary of lines that are inside polygon outside_lines: "
"Dictionary of lines that are outside polygon"
msgstr ""

# d49d44ad2c6a44f8822289585124c033
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_lines_by_polygon:19
msgid ""
"Elements in output dictionaries can be a list of multiple lines. One line is "
"a numpy array of vertices."
msgstr ""

# 46986e83e866445181dda4a2e0e13e76
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_lines_by_polygon:22
msgid ""
"Both output dictionaries use the indices of the original line as keys. This "
"makes it possible to track which line the new clipped lines come from, if "
"one e.g. wants to assign the original attribute values to clipped lines."
msgstr ""

# df976be32e8047ef914f3afd0722d834
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_lines_by_polygon:27
msgid "This is a wrapper around clip_line_by_polygon"
msgstr ""

# 9714a46f74e2470cb6f5f41a85a08778
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_lines_by_polygons:1
msgid "Clip multiple lines by multiple polygons"
msgstr ""

# 0acf4bbeac0542e086431f8eace28334
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_lines_by_polygons:6
msgid "polygons: list of polygons, each an array of vertices"
msgstr ""

# 7e8def248f6549f4ba0d40f2b86b1fef
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_lines_by_polygons:8
msgid ""
"an polygon boundary should be considered to be inside (closed=True), outside "
"(closed=False) or undetermined (closed=None). The latter case will speed the "
"algorithm up but lines on boundaries may or may not be deemed to fall inside "
"the polygon and so will be indeterministic."
msgstr ""

# 1a6da865459f4ff1b130997d056e4612
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_lines_by_polygons:16
msgid ""
"lines_covered: List of polylines inside a polygon -o ne per input polygon."
msgstr ""

# af563f942101414d89ef2c419dffe7d3
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.generate_random_points_in_bbox:1
msgid "Generate random points in polygon bounding box"
msgstr ""

# 0c5da7f2c70149e9b7ae4a3afcc8eb31
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.in_and_outside_polygon:1
msgid "Separate a list of points into two sets inside and outside a polygon"
msgstr ""

# e1c92a3ab04c42b9a66db0a9c9117a85
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.in_and_outside_polygon:4
msgid ""
"points: (tuple, list or array) of coordinates polygon: list or Nx2 array of "
"polygon vertices closed: Set to True if points on boundary are considered"
msgstr ""

# 924b6be748b945e2945ec0a122601042
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.in_and_outside_polygon:7
msgid "to be 'inside' polygon"
msgstr ""

# fceb2106717d4c56b185749950f59b40
# fb4e119223654dab825b1156c4b07dc0
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.in_and_outside_polygon:9
#: safe.common.polygon.outside_polygon:10
msgid "these are considered outside polygon"
msgstr ""

# 20a2c40a68b0453c9273ac2a28e6fed4
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.in_and_outside_polygon:12
msgid ""
"inside: Indices of points inside the polygon outside: Indices of points "
"outside the polygon"
msgstr ""

# 8fa3dc7ab8004457848f1b4e9f66cc3b
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.in_and_outside_polygon:15
msgid "See separate_points_by_polygon for more documentation"
msgstr ""

# 1adcf0adcc86437d856f9f0a76f07fd2
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.inside_polygon:1
msgid "Determine points inside a polygon"
msgstr ""

# 68dfae61087346a794ce834fb677ffe4
# 3abe1729240a417daa6c7008d1885470
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.inside_polygon:3 safe.common.polygon.outside_polygon:3
msgid ""
"Functions inside_polygon and outside_polygon have been defined in terms of "
"separate_by_polygon which will put all inside indices in the first part of "
"the indices array and outside indices in the last"
msgstr ""

# 67b5ea44f4f94cd196994bc2d49fa66f
# 883c655eb7674d26a2dd3eeb8e717222
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.inside_polygon:7 safe.common.polygon.outside_polygon:7
msgid "See separate_points_by_polygon for documentation"
msgstr ""

# 296982a2b8e343bab7d684356fadbdef
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.inside_polygon:9
msgid ""
"points and polygon can be a geospatial instance, a list or a numeric array"
msgstr ""

# 4317128fe48a43d69dfe4fbd3a6c5478
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.inside_polygon:12
msgid ""
"holes: list of polygons representing holes. Points inside either of these "
"are not considered inside_polygon"
msgstr ""

# a88c4f74ea0f4836a4420a2fe5990b49
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.intersection:1
msgid "Returns intersecting point between two line segments."
msgstr ""

# e17d4e18e0ae4ffb9229bde32e431256
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.intersection:3
msgid ""
"If the lines are parallel or coincide partly (i.e. share a common segment), "
"they are considered to not intersect."
msgstr ""

# 3c935bd75f78438ba182aad71045ebcd
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.intersection:8
msgid "[[x0, y0], [x1, y1]]"
msgstr ""

# d835c8d1bded4c8e90681463bbfcab87
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.intersection:11
msgid ""
"line[0, 0, :] = x2 line[0, 1, :] = y2 line[1, 0, :] = x3 line[1, 1, :] = y3"
msgstr ""

# b4be32740a4b421a91cdfd1f0698b1a7
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.intersection:18
msgid ""
"(in case of no intersection) If line1 consisted of just one line, None is "
"returned for backwards compatibility"
msgstr ""

# 3e95d38de7df4da89c5406c4e99b15cd
# 64dec9b6bdd54ee5af53977542bb2366
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.intersection:23 safe.common.polygon.point_on_line:16
msgid "Notes"
msgstr ""

# f3d617f1b50247e889040f73a34fa121
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.intersection:25
msgid ""
"A vectorised input line can be constructed either as list: line1 = [[[0, 24, "
"0, 15],    # x2"
msgstr ""

# 4b43b47e73294c9a90cd804ecfd8a508
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.intersection:27
msgid "[12, 0, 24, 0]],   # y2"
msgstr ""

# 5f0795f9e41f4aaea273b80982429684
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.intersection:29
msgid "[0, 12, 12, 15]]]  # y3"
msgstr ""

# 956157174b954c20b757189ea9a7d390
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.intersection:31
msgid "or as an array"
msgstr ""

# d31093bcfa024197be333f0f4af6b1ca
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.intersection:33
msgid ""
"line1 = numpy.zeros(16).reshape(2, 2, 4)  # Four segments line1[0, 0, :] = "
"[0, 24, 0, 15]   # x2 line1[0, 1, :] = [12, 0, 24, 0]   # y2 line1[1, 0, :] "
"= [24, 0, 0, 5]    # x3 line1[1, 1, :] = [0, 12, 12, 15]  # y3"
msgstr ""

# 6a5d6f33df2343b781fd554521c77699
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.intersection:40
msgid "To select array of intersections from result, use the following idiom:"
msgstr ""

# c674427af6264ee29f090ad4a6afa783
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.intersection:42
msgid ""
"value = intersection(line0, line1) mask = -numpy.isnan(value[:, 0]) v = value"
"[mask]"
msgstr ""

# b5ef6739ef6e4ad59349bd8b6a929fa8
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.is_inside_polygon:1
msgid "Determine if one point is inside a polygon"
msgstr ""

# 3bb6504a711d4be4a8367bc853b6c84f
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.is_inside_polygon:3
msgid "See inside_polygon for more details"
msgstr ""

# b8340e22713f44319a64d11b7eb71779
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.is_outside_polygon:1
msgid "Determine if one point is outside a polygon"
msgstr ""

# 1bdcce0121264e81852652bb1f5c7eb0
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.is_outside_polygon:3
msgid "See outside_polygon for more details"
msgstr ""

# da3dfba2a65e467692be0fa2e0bf3ec3
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.join_line_segments:1
msgid "Join adjacent line segments"
msgstr ""

# eeb4eb3bcd5f41ccbc9a04013aadf1d0
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.join_line_segments:4
msgid ""
"segments: List of distinct line segments [[p0, p1], [p2, p3], ...] rtol, "
"atol: Optional tolerances passed on to numpy.allclose"
msgstr ""

# 10eb504e9177430a8fe70590527bfd8c
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.join_line_segments:8
msgid ""
"list of Nx2 numpy arrays each corresponding to a continuous line formed from "
"consecutive segments"
msgstr ""

# 0da18ac3071641069e3ba96a16177234
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.line_dictionary_to_geometry:1
msgid "Convert dictionary of lines to list of Nx2 arrays"
msgstr ""

# b663b6ddeee74f08b95a954340ff8ce2
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.line_dictionary_to_geometry:4
msgid "D: Dictionary of lines e.g. as produced by clip_lines_by_polygon"
msgstr ""

# 5aed9d8a83ac470dad160e9c3da517ab
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.line_dictionary_to_geometry:7
msgid "List of Nx2 arrays suitable as geometry input to class Vector"
msgstr ""

# ed40ee6cb0b14eb4a46168e888ab4349
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.outside_polygon:1
msgid "Determine points outside a polygon"
msgstr ""

# 93114d9de5854acf9ce489a0c2dff2ae
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.point_on_line:1
msgid "Determine if a point is on a line segment"
msgstr ""

# 3fe34a663b2a4f3b8471b48bde146fff
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.point_on_line:5
msgid "one point given by sequence [x, y]"
msgstr ""

# 98f0dfec1f0a42989c3f9ce4dcf83c92
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.point_on_line:6
msgid "multiple points given by list of points or Nx2 array"
msgstr ""

# 166cb2d328d0409e8f3e6ed6b5aa9258
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.point_on_line:8
msgid ""
"the equivalent 2x2 numeric array with each row corresponding to a point."
msgstr ""

# e71b349207cc4f1e9da72a3d21e9fd30
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.point_on_line:10
msgid ""
"rtol: Relative error for how close a point must be to be accepted atol: "
"Absolute error for how close a point must be to be accepted"
msgstr ""

# 3e176deed58d4ed4842596b031cba8c6
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.point_on_line:14
msgid "True or False"
msgstr ""

# a53ca2a51a4f4632905beb43928a68aa
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.point_on_line:18
msgid ""
"Line can be degenerate and function still works to discern coinciding points "
"from non-coinciding."
msgstr ""

# 0d9c84b04f25474dbfd815730c51bd11
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.point_on_line:21
msgid "Tolerances rtol and atol are used with numpy.allclose()"
msgstr ""

# c58a494b262d421aa887a50ea081509c
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.polygon2segments:1
msgid "Convert polygon to segments structure suitable for use in intersection"
msgstr ""

# 88ea51ed9d664b5989dda8b9bfcef7cd
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.polygon2segments:4
msgid "polygon: Nx2 array of polygon vertices"
msgstr ""

# 12964a2b648b4ff9b4e83429b121e287
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.polygon2segments:7
msgid ""
"A collection of line segments (x0, y0) -> (x1, y1) vectorised following the "
"format"
msgstr ""

# bd33979e04e04570868e357085da8758
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.polygon2segments:9
msgid ""
"line[0, 0, :] = x0 line[0, 1, :] = y0 line[1, 0, :] = x1 line[1, 1, :] = y1"
msgstr ""

# 93d1c6ba9bc04f919c094a55c23fce1b
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.populate_polygon:1
msgid "Populate given polygon with uniformly distributed points."
msgstr ""

# 35a0e21460ce488d92221a1043877dbc
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.populate_polygon:4
msgid ""
"polygon - list of vertices of polygon number_of_points - (optional) number "
"of points seed - seed for random number generator (default=None) exclude - "
"list of polygons (inside main polygon) from where points"
msgstr ""

# 9b4e4ed3ca8f4ba49c1f911cff357903
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.populate_polygon:8
msgid "should be excluded"
msgstr ""

# 187d49e2354942c492683e2667ccd05a
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.populate_polygon:11
msgid "points - list of points inside polygon"
msgstr ""

# a38b148bfba94e7396da91080ea1ef80
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.populate_polygon:14
msgid ""
"populate_polygon( [[0,0], [1,0], [1,1], [0,1]], 5 ) will return five "
"randomly selected points inside the unit square"
msgstr ""

# f5d384bede7743c68f67e6209b1dadf5
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.separate_points_by_polygon:1
msgid "Determine whether points are inside or outside a polygon."
msgstr ""

# 8dec36a2e637401fb7cd7445127ab638
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.separate_points_by_polygon:4
msgid "points: Tuple of (x, y) coordinates, or list of tuples"
msgstr ""

# 0a98835c3407473a80c5aeb0c725ef39
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.separate_points_by_polygon:5
msgid "polygon: list or Nx2 array of polygon vertices"
msgstr ""

# caad6787592545f4885e4c2243851fbb
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.separate_points_by_polygon:6
msgid "polygon_bbox: (optional) bounding box for polygon"
msgstr ""

# 7279014b038b455982369b2b2fac8402
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.separate_points_by_polygon:8
msgid ""
"regarded as belonging to the polygon (closed = True) or not (closed = "
"False). If None, boundary is left undefined, i.e. some points on boundary "
"may be deemed to be inside while others may be deemed to be outside. This "
"options makes the code faster."
msgstr ""

# 12d14b942e9941c9bfab50852ebb34a9
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.separate_points_by_polygon:14
msgid "use_numpy: Use the fast numpy implementation"
msgstr ""

# 03617b34a1cd476498637bb5f80fb276
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.separate_points_by_polygon:18
msgid "falling inside the polygon"
msgstr ""

# f9cb64b6c8b04c38840ec7243ad7d64b
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.separate_points_by_polygon:20
msgid "falling outside the polygon"
msgstr ""

# e6e390fbf88e4391bd602b637aded006
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.separate_points_by_polygon:22
msgid "Raises: A generic Exception is raised for unexpected input."
msgstr ""

# 15d52f95545d43a08e1be51939c1d5b0
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.separate_points_by_polygon:26
msgid ""
"U = [[0,0], [1,0], [1,1], [0,1]]  # Unit square separate_points_by_polygon"
"( [[0.5, 0.5], [1, -0.5], [0.3, 0.2]], U)"
msgstr ""

# b9fd61b893ba4280a7fa2187c093c52f
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.separate_points_by_polygon:29
msgid ""
"will return the indices [0, 2, 1] and count == 2 as only the first and the "
"last point are inside the unit square"
msgstr ""

# 948fd751e1264121b46f0b1660ab56b8
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.separate_points_by_polygon:33
msgid ""
"The vertices may be listed clockwise or counterclockwise and the first point "
"may optionally be repeated. Polygons do not need to be convex. Polygons can "
"have holes in them and points inside a hole is regarded as being outside the "
"polygon."
msgstr ""

# 58338939963d436ba152376b8760b1bd
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.separate_points_by_polygon:39
msgid ""
"Algorithm is based on work by Darel Finley, http://www.alienryderflex.com/"
"polygon/"
msgstr ""

# 8914a812a0304fb1b2abad954a9722a8
#: ../../source/api-docs/safe/common/polygon.rst:11
msgid "This module forms part of the `InaSAFE <http://inasafe.org>`_ tool."
msgstr ""
