# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, QGIS project
# This file is distributed under the same license as the QGIS Documentation Project package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation Project 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-28 10:26\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

# fc5d8f9444814e878e020efeab49a5c5
#: ../../source/api-docs/safe/common/polygon.rst:6
msgid "Module:  safe.common.polygon"
msgstr ""

# 59715d37861c4e918faed48b5b451e36
#: ../../../safe/common/polygon.py:docstring of safe.common.polygon:1
msgid "**Polygon, line and point algorithms.**"
msgstr ""

# d619e4c65da74b4c9fbf9d064a08b4f0
#: ../../../safe/common/polygon.py:docstring of safe.common.polygon:5
msgid ""
"separate_points_by_polygon: Fundamental clipper intersection: Determine "
"intersections of lines"
msgstr ""

# d6a7572abbbb4bdfb5343e89faa9b5d5
#: ../../../safe/common/polygon.py:docstring of safe.common.polygon:9
msgid ""
"inside_polygon is_inside_polygon outside_polygon is_outside_polygon "
"point_on_line"
msgstr ""

# da584295c4614e48811db9a796b0c96d
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_grid_by_polygons:1
msgid "Clip raster grid by polygon."
msgstr ""

# 5d6c23e3e00442ceb5b75623337fc3d0
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_grid_by_polygons:4
msgid "A: MxN array of grid points"
msgstr ""

# 44bc150defed4f95bc6222fb41a9daa6
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_grid_by_polygons:6
msgid ""
"(top left x, w-e pixel resolution, rotation, top left y, rotation, n-s pixel "
"resolution)"
msgstr ""

# 47b5a6a9bf314543a1205c02d6e86fe0
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_grid_by_polygons:8
msgid "polygons: list of polygon geometry objects or list of polygon arrays"
msgstr ""

# 23e15ebe0186400a96b4caed30d5f3e0
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_grid_by_polygons:11
msgid "points_covered: List of (points, values) - one per input polygon."
msgstr ""

# 5c8d80d7fa0d4a87aeba8ae062712ccf
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_grid_by_polygons:13
msgid ""
"Implementing algorithm suggested in https://github.com/AIFDR/inasafe/"
"issues/91#issuecomment-7025120"
msgstr ""

# cb274f0774be446aaa3588188518b6cd
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_grid_by_polygons:16
msgid ""
"Grid points are considered to be pixel-registered which means that each "
"point represents the center of its grid cell. The required half cell shifts "
"are taken care of by the function :func:`geotransform2axes`."
msgstr ""

# c5688fdd30974f63bbd50773124ee68f
# 31b8077f2f32404da3864c4c1c3c4405
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_grid_by_polygons:21
#: safe.common.polygon.clip_lines_by_polygons:20
msgid "If multiple polygons overlap, the one first encountered will be used."
msgstr ""

# b89a3b5fd00c44ea9ec16945660ccfbe
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_line_by_polygon:1
msgid "Clip line segments by polygon"
msgstr ""

# 42d50f8410f74167b8a99f38b5421f4f
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_line_by_polygon:5
msgid "the equivalent Nx2 numpy array"
msgstr ""

# edb0fb3eaf7545ea8626f7df99136e5c
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_line_by_polygon:6
msgid ""
"polygon: list or Nx2 array of polygon vertices closed: (optional) determine "
"whether points on boundary should be regarded as belonging to the polygon "
"(closed = True) or not (closed = False) - False is not recommended here "
"polygon_bbox: Provide bounding box around polygon if known."
msgstr ""

# 5b63b4033e3b4b39815bcaf0b7ba943b
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_line_by_polygon:11
msgid "This is a small optimisation"
msgstr ""

# fa90700a419c4585b3581ee02523361b
# fbadee3f810e45508539c59525e8a26d
# 1eaba274dbd441acbf96b5a2006e8e34
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_line_by_polygon:12
#: safe.common.polygon.clip_lines_by_polygon:13
#: safe.common.polygon.separate_points_by_polygon:13
msgid "check_input: Allows faster execution if set to False"
msgstr ""

# 891396b894164d42a2828b0c9e9ba686
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_line_by_polygon:15
msgid ""
"inside_lines: Clipped lines that are inside polygon outside_lines: Clipped "
"lines that are outside polygon"
msgstr ""

# 93a280f6c7ae49c09655d7ba1df5e697
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_line_by_polygon:18
msgid ""
"Both outputs lines take the form of lists of Nx2 numpy arrays, i.e. each "
"line is an array of multiple segments"
msgstr ""

# 018f290866e447528b432be93aec0c45
# 2a48172db60d4edb912996463f508b59
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_line_by_polygon:21
#: safe.common.polygon.separate_points_by_polygon:24
msgid "Example:"
msgstr ""

# 42ffb9ff9d9140919c13dc5c0e04a54c
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_line_by_polygon:23
msgid "U = [[0,0], [1,0], [1,1], [0,1]]  # Unit square"
msgstr ""

# d01798a61a754ba3be92e9f847ea3c63
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_line_by_polygon:25
msgid ""
"# Simple horizontal fully intersecting line line = [[-1, 0.5], [2, 0.5]]"
msgstr ""

# d498fb3a5b944e8185b9cf31c912f62a
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_line_by_polygon:28
msgid ""
"inside_line_segments, outside_line_segments =             "
"clip_line_by_polygon(line, polygon)"
msgstr ""

# 7065a4ec4e994b7799ae1e5b841c1984
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_line_by_polygon:31
msgid "[[[0, 0.5], [1, 0.5]]])"
msgstr ""

# 7a4cfd09968847088ec6fee3d9987119
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_line_by_polygon:35
msgid "[[1, 0.5], [2, 0.5]]])"
msgstr ""

# 61ec96cdf4c44522aef07943f25fb9b0
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_line_by_polygon:38
msgid "The assumptions listed in separate_points_by_polygon apply"
msgstr ""

# 29bd471e6ff442feb88a6b4c4bbc6012
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_line_by_polygon:40
msgid "Output line segments are listed as separate lines i.e. not joined"
msgstr ""

# 80f33e00757441a69e5df383b2ae2bef
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_lines_by_polygon:1
msgid "Clip multiple lines by polygon"
msgstr ""

# b6a18f3ea57d4f42b72cab10d0a225b7
# 3bd91d81cf0247608cabc247023a6a9a
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_lines_by_polygon:5
#: safe.common.polygon.clip_lines_by_polygons:5
msgid "where pi and qi are point coordinates (x, y)."
msgstr ""

# 1603dbf993b5436699fee9d791cc8bbf
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_lines_by_polygon:6
msgid ""
"polygon: list or Nx2 array of polygon vertices closed: (optional) determine "
"whether points on boundary should be"
msgstr ""

# 28bdd000b65b474bbbc9f3c9ef595e58
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_lines_by_polygon:8
msgid ""
"regarded as belonging to the polygon (closed = True) or not (closed = False) "
"- False is not recommended here This parameter can also be None in which "
"case it is undefined whether a line on the boundary will fall inside or "
"outside. This will make the algorithm about 20% faster."
msgstr ""

# 6407e057864340baa764cc8b0fda3855
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_lines_by_polygon:16
msgid ""
"inside_lines: Dictionary of lines that are inside polygon outside_lines: "
"Dictionary of lines that are outside polygon"
msgstr ""

# e8f45081526241c28b7bf9593c7745a7
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_lines_by_polygon:19
msgid ""
"Elements in output dictionaries can be a list of multiple lines. One line is "
"a numpy array of vertices."
msgstr ""

# ddcc832072e8491b936ca62018c4ea76
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_lines_by_polygon:22
msgid ""
"Both output dictionaries use the indices of the original line as keys. This "
"makes it possible to track which line the new clipped lines come from, if "
"one e.g. wants to assign the original attribute values to clipped lines."
msgstr ""

# 36c7ec33150640adbc41606866830209
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_lines_by_polygon:27
msgid "This is a wrapper around clip_line_by_polygon"
msgstr ""

# 166f1819ea6f4d839e0f8d2bd799bb6f
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_lines_by_polygons:1
msgid "Clip multiple lines by multiple polygons"
msgstr ""

# 5d53f051b199442d95c03adac2cad09c
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_lines_by_polygons:6
msgid "polygons: list of polygons, each an array of vertices"
msgstr ""

# d177692824a9473b8cd3ddca5f6eb010
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_lines_by_polygons:8
msgid ""
"an polygon boundary should be considered to be inside (closed=True), outside "
"(closed=False) or undetermined (closed=None). The latter case will speed the "
"algorithm up but lines on boundaries may or may not be deemed to fall inside "
"the polygon and so will be indeterministic."
msgstr ""

# 4484e54d1e8947d1a7171780ef3f347c
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.clip_lines_by_polygons:16
msgid ""
"lines_covered: List of polylines inside a polygon -o ne per input polygon."
msgstr ""

# a579fd19290948198a94cdc103309fcc
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.generate_random_points_in_bbox:1
msgid "Generate random points in polygon bounding box"
msgstr ""

# 46e17de22d894de0aa9240f630672d64
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.in_and_outside_polygon:1
msgid "Separate a list of points into two sets inside and outside a polygon"
msgstr ""

# ad7361f2dfa94af78e9aa2f2ec85662c
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.in_and_outside_polygon:4
msgid ""
"points: (tuple, list or array) of coordinates polygon: list or Nx2 array of "
"polygon vertices closed: Set to True if points on boundary are considered"
msgstr ""

# f0da57c0d8be475bb4e0b2756617dd62
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.in_and_outside_polygon:7
msgid "to be 'inside' polygon"
msgstr ""

# 32f215271b574835885226df9d19b947
# aa58bddaf5b04643b8d1c2f6a6d65982
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.in_and_outside_polygon:9
#: safe.common.polygon.outside_polygon:10
msgid "these are considered outside polygon"
msgstr ""

# 3c99bdc10d4e4f998791565c06189ff2
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.in_and_outside_polygon:12
msgid ""
"inside: Indices of points inside the polygon outside: Indices of points "
"outside the polygon"
msgstr ""

# 2f1f684d3d134de98bae37f0fc99e2f5
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.in_and_outside_polygon:15
msgid "See separate_points_by_polygon for more documentation"
msgstr ""

# 048372b4a73a414c89253d0d58056103
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.inside_polygon:1
msgid "Determine points inside a polygon"
msgstr ""

# 590d9a2fd3cc4c7b8e00131137abb6dd
# aec6437ac43e4cf99ed9417e358ec9a4
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.inside_polygon:3 safe.common.polygon.outside_polygon:3
msgid ""
"Functions inside_polygon and outside_polygon have been defined in terms of "
"separate_by_polygon which will put all inside indices in the first part of "
"the indices array and outside indices in the last"
msgstr ""

# d19283cad05b4a11afa03b2c36688655
# bce85826d2d94831bdfa22ac64b544e7
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.inside_polygon:7 safe.common.polygon.outside_polygon:7
msgid "See separate_points_by_polygon for documentation"
msgstr ""

# 3719fb795295457e96ea22c4f61ab2af
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.inside_polygon:9
msgid ""
"points and polygon can be a geospatial instance, a list or a numeric array"
msgstr ""

# bb4687c127de4e74aaaa688f2ec29a8b
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.inside_polygon:12
msgid ""
"holes: list of polygons representing holes. Points inside either of these "
"are not considered inside_polygon"
msgstr ""

# a37cff1a23cb4dfda0b3445268534caf
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.intersection:1
msgid "Returns intersecting point between two line segments."
msgstr ""

# 26c192962a9544458f760b944136ae08
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.intersection:3
msgid ""
"If the lines are parallel or coincide partly (i.e. share a common segment), "
"they are considered to not intersect."
msgstr ""

# 499b176ca1d04c5b8d450b8f7b56c110
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.intersection:8
msgid "[[x0, y0], [x1, y1]]"
msgstr ""

# a6288b1863b3420d8b02109f9bc4c386
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.intersection:11
msgid ""
"line[0, 0, :] = x2 line[0, 1, :] = y2 line[1, 0, :] = x3 line[1, 1, :] = y3"
msgstr ""

# 7b13c72442a4407a83ab66ff57d2c728
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.intersection:18
msgid ""
"(in case of no intersection) If line1 consisted of just one line, None is "
"returned for backwards compatibility"
msgstr ""

# 1b156a3cab624af59e8c07af8f7f1537
# bae55543c6b24ea09f84bcddd8eac44e
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.intersection:23 safe.common.polygon.point_on_line:16
msgid "Notes"
msgstr ""

# 7dff11e0e2114424963fcfa08100ab47
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.intersection:25
msgid ""
"A vectorised input line can be constructed either as list: line1 = [[[0, 24, "
"0, 15],    # x2"
msgstr ""

# 840f9f4355104799bdc550654d8e894c
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.intersection:27
msgid "[12, 0, 24, 0]],   # y2"
msgstr ""

# ef69a58c08c245cdbbbf788f9a6c88a2
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.intersection:29
msgid "[0, 12, 12, 15]]]  # y3"
msgstr ""

# 5614736258704b4eb8231d41d49e6cc5
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.intersection:31
msgid "or as an array"
msgstr ""

# 5ee816adcfc1491bae417407c7321166
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.intersection:33
msgid ""
"line1 = numpy.zeros(16).reshape(2, 2, 4)  # Four segments line1[0, 0, :] = "
"[0, 24, 0, 15]   # x2 line1[0, 1, :] = [12, 0, 24, 0]   # y2 line1[1, 0, :] "
"= [24, 0, 0, 5]    # x3 line1[1, 1, :] = [0, 12, 12, 15]  # y3"
msgstr ""

# fcd24558eaf34f55a573b9eae6535d12
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.intersection:40
msgid "To select array of intersections from result, use the following idiom:"
msgstr ""

# 14c5faeaafa94fa6aae05d49912e462c
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.intersection:42
msgid ""
"value = intersection(line0, line1) mask = -numpy.isnan(value[:, 0]) v = value"
"[mask]"
msgstr ""

# 7a328f83c09049a3af530fba4521d90c
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.is_inside_polygon:1
msgid "Determine if one point is inside a polygon"
msgstr ""

# c4e33d971a924e1691cfb4b21b543812
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.is_inside_polygon:3
msgid "See inside_polygon for more details"
msgstr ""

# 0e31166e9dd5495c8492d07f9b7515a3
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.is_outside_polygon:1
msgid "Determine if one point is outside a polygon"
msgstr ""

# 236870b266d140ffbadb720477f37a04
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.is_outside_polygon:3
msgid "See outside_polygon for more details"
msgstr ""

# b4093cc2162845f5b6a40cbe517defe0
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.join_line_segments:1
msgid "Join adjacent line segments"
msgstr ""

# 347b660e5c88439e8b74bfe48ef43625
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.join_line_segments:4
msgid ""
"segments: List of distinct line segments [[p0, p1], [p2, p3], ...] rtol, "
"atol: Optional tolerances passed on to numpy.allclose"
msgstr ""

# 1142614f3eba42538a4be9d1babcbaff
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.join_line_segments:8
msgid ""
"list of Nx2 numpy arrays each corresponding to a continuous line formed from "
"consecutive segments"
msgstr ""

# 72b2ce3c64df42378153ea73809e8b99
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.line_dictionary_to_geometry:1
msgid "Convert dictionary of lines to list of Nx2 arrays"
msgstr ""

# 189ece9c2ccc4e7398518642cc75ece8
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.line_dictionary_to_geometry:4
msgid "D: Dictionary of lines e.g. as produced by clip_lines_by_polygon"
msgstr ""

# 0fefde9352bf494781e6495c99d40a32
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.line_dictionary_to_geometry:7
msgid "List of Nx2 arrays suitable as geometry input to class Vector"
msgstr ""

# b09793110f734a4aa72ae27c4f021cd6
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.outside_polygon:1
msgid "Determine points outside a polygon"
msgstr ""

# 57821f0bde9a48858632f609c52074a9
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.point_on_line:1
msgid "Determine if a point is on a line segment"
msgstr ""

# 806c8dc4611f40e4a6dfb114e008a65d
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.point_on_line:5
msgid "one point given by sequence [x, y]"
msgstr ""

# 23a630857ad84f5488647a32ebfe1cc4
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.point_on_line:6
msgid "multiple points given by list of points or Nx2 array"
msgstr ""

# 12c450ad208c4b1aa0be2345c6d45021
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.point_on_line:8
msgid ""
"the equivalent 2x2 numeric array with each row corresponding to a point."
msgstr ""

# d2c3be6b979249ee82112fb0bc1fa6ec
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.point_on_line:10
msgid ""
"rtol: Relative error for how close a point must be to be accepted atol: "
"Absolute error for how close a point must be to be accepted"
msgstr ""

# 5dbfb5c4e0e74475a75597ed33363330
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.point_on_line:14
msgid "True or False"
msgstr ""

# f37f8df8a4f140f19161b4f545d004bf
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.point_on_line:18
msgid ""
"Line can be degenerate and function still works to discern coinciding points "
"from non-coinciding."
msgstr ""

# ee6493144ab041e6a1a46e2713a6332c
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.point_on_line:21
msgid "Tolerances rtol and atol are used with numpy.allclose()"
msgstr ""

# 56e879aaf4664d96a9f1f8e574f4f59a
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.polygon2segments:1
msgid "Convert polygon to segments structure suitable for use in intersection"
msgstr ""

# 23521ece50f042e89357378a90dadf62
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.polygon2segments:4
msgid "polygon: Nx2 array of polygon vertices"
msgstr ""

# c8956d4a81214541966db05a3ab806ee
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.polygon2segments:7
msgid ""
"A collection of line segments (x0, y0) -> (x1, y1) vectorised following the "
"format"
msgstr ""

# 4ee7d8e35706428894ccd3e66940c5ec
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.polygon2segments:9
msgid ""
"line[0, 0, :] = x0 line[0, 1, :] = y0 line[1, 0, :] = x1 line[1, 1, :] = y1"
msgstr ""

# afc36e37cdc2435bafc34708022db879
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.populate_polygon:1
msgid "Populate given polygon with uniformly distributed points."
msgstr ""

# 5aa8e443122247d280716cc2cec68079
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.populate_polygon:4
msgid ""
"polygon - list of vertices of polygon number_of_points - (optional) number "
"of points seed - seed for random number generator (default=None) exclude - "
"list of polygons (inside main polygon) from where points"
msgstr ""

# c549ea72b6b44f06b77a6820a8b93a33
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.populate_polygon:8
msgid "should be excluded"
msgstr ""

# ca99b8811afe4a4d95513c0902b36c60
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.populate_polygon:11
msgid "points - list of points inside polygon"
msgstr ""

# 0e020da9334e475faeb2f37ef46a3129
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.populate_polygon:14
msgid ""
"populate_polygon( [[0,0], [1,0], [1,1], [0,1]], 5 ) will return five "
"randomly selected points inside the unit square"
msgstr ""

# 2c320deba29d4573a8a885375e6e4d7a
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.separate_points_by_polygon:1
msgid "Determine whether points are inside or outside a polygon."
msgstr ""

# e44f605026c94c5787e816f0ba5569f2
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.separate_points_by_polygon:4
msgid "points: Tuple of (x, y) coordinates, or list of tuples"
msgstr ""

# 785b1ffa51ca461c94a5599af299bcad
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.separate_points_by_polygon:5
msgid "polygon: list or Nx2 array of polygon vertices"
msgstr ""

# aa9eb1e8ba1249ac99f77ac219c4cff7
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.separate_points_by_polygon:6
msgid "polygon_bbox: (optional) bounding box for polygon"
msgstr ""

# 24c6f533584245699e50d1a73a838953
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.separate_points_by_polygon:8
msgid ""
"regarded as belonging to the polygon (closed = True) or not (closed = "
"False). If None, boundary is left undefined, i.e. some points on boundary "
"may be deemed to be inside while others may be deemed to be outside. This "
"options makes the code faster."
msgstr ""

# 1bfeedd7f7554be9ba26fbf3b1de883c
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.separate_points_by_polygon:14
msgid "use_numpy: Use the fast numpy implementation"
msgstr ""

# bac2546886df452b993d4c43375051f9
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.separate_points_by_polygon:18
msgid "falling inside the polygon"
msgstr ""

# ca7a2b979a6043059ba5c0a8c812a451
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.separate_points_by_polygon:20
msgid "falling outside the polygon"
msgstr ""

# 662bd426eac540859e9164b1918c4a96
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.separate_points_by_polygon:22
msgid "Raises: A generic Exception is raised for unexpected input."
msgstr ""

# 9893a22bc71b4d9c9f328963a8ecb9ed
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.separate_points_by_polygon:26
msgid ""
"U = [[0,0], [1,0], [1,1], [0,1]]  # Unit square separate_points_by_polygon"
"( [[0.5, 0.5], [1, -0.5], [0.3, 0.2]], U)"
msgstr ""

# 69ad0d2eea7943bbbad76c0eb0c22aaf
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.separate_points_by_polygon:29
msgid ""
"will return the indices [0, 2, 1] and count == 2 as only the first and the "
"last point are inside the unit square"
msgstr ""

# 7dd0e561f5124c35b1db0479d55eaf54
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.separate_points_by_polygon:33
msgid ""
"The vertices may be listed clockwise or counterclockwise and the first point "
"may optionally be repeated. Polygons do not need to be convex. Polygons can "
"have holes in them and points inside a hole is regarded as being outside the "
"polygon."
msgstr ""

# 0a2ab4e388b44afeb0d8b07ad7233435
#: ../../../safe/common/polygon.py:docstring of
#: safe.common.polygon.separate_points_by_polygon:39
msgid ""
"Algorithm is based on work by Darel Finley, http://www.alienryderflex.com/"
"polygon/"
msgstr ""

# 8914a812a0304fb1b2abad954a9722a8
#: ../../source/api-docs/safe/common/polygon.rst:11
msgid "This module forms part of the `InaSAFE <http://inasafe.org>`_ tool."
msgstr ""
