# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, QGIS project
# This file is distributed under the same license as the QGIS Documentation Project package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation Project 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-28 10:26\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

# ba47ee7f05084cc99d3e38cb9a30cb18
#: ../../source/api-docs/safe/storage/test_io.rst:6
msgid "Module:  safe.storage.test_io"
msgstr ""

# 92725dd5940944298aff6f9574917e1e
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO:1
msgid "Tests for reading and writing of raster and vector data"
msgstr ""

# 6331caabcadd47068d691e43265fe4b0
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.Xtest_reading_and_writing_of_multiband_rasters:1
msgid "Multiband rasters can be read and written correctly"
msgstr ""

# f115568eeabf41e29e3a1d741b57a49d
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.Xtest_reading_and_writing_of_sqlite_vector_data:1
msgid "SQLite vector data can be read and written correctly"
msgstr ""

# 47e2aab4ee8b404298261a3384d27cd1
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_3d_polygon:1
msgid "3D polygons can be read correctly with z component dismissed"
msgstr ""

# caaccf38385b4bf8b23004df380de680
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_3d_polygon:3
msgid ""
"3D polygons are a specialisation of '2d' polygons which assigns a 'z' to "
"each vertex (wkbPolygon25D in ogr parlance). It's normally referred to as "
"2.5D since the format does not truly represent volumetric spaces"
msgstr ""

# 52ae6151f9364e11aabea3187ae0e831
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_3d_polygon:8
msgid ""
"This test verifies that such polygons can be read as 2d - i.e. with the "
"third dimension removed."
msgstr ""

# 0fc5f5b7469945e4bc0ea0470ab77271
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_3d_polygon:11
msgid ""
"ogrinfo reports this for 25d polygons: INFO: Open of `../inasafe_data/"
"test/25dpolygon.shp' using driver `ESRI Shapefile' successful. 1: 25dpolygon "
"(3D Polygon)"
msgstr ""

# 9e4d60cdb7674c929562aa652f2deeaf
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_analysis_of_vector_data_top_N:1
msgid "Analysis of vector data - get top N of an attribute"
msgstr ""

# 3df88ece22de462789c4b8e583e9a08c
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_array2wkt:1
msgid "Conversion to wkt data works"
msgstr ""

# 76087178417442a49b115d5accbc37b9
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_array2wkt:4
msgid "'POLYGON((0 1, 2 3, 4 5, 6 7, 8 9))'"
msgstr ""

# 8343327864354e1fa4402316bbd165fa
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_attribute_types:1
msgid "Different attribute types are handled correctly in vector data"
msgstr ""

# f538af38200b436f8e8dad1d153664d8
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_bad_ascii_data:1
msgid "ASC raster files with bad data causes good error message"
msgstr ""

# 55ec1ae564bb472385b9a655aaffc8be
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_bad_ascii_data:3
msgid "This example is courtesy of Hyeuk Ryu"
msgstr ""

# 4867e78bae37412faa26a57b8b074124
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_bins:1
msgid "Linear and quantile bins are correct"
msgstr ""

# 42f71b3e83c44dc6ab10be4cd734a4fa
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_bounding_box_conversions:1
msgid "Bounding boxes can be converted between list and string"
msgstr ""

# 8fc7a589152343059f892be987f96a46
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_bounding_box_intersection:1
msgid "Intersections of bounding boxes work"
msgstr ""

# 304a246a035a4909bd2bd1672bc122b5
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_buffered_bounding_box:1
msgid "Bounding box can be buffered"
msgstr ""

# 647ad5bb42654639b4cf21e2b9c3456d
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_centroids_from_polygon_data:1
msgid "Centroid point data can be derived from polygon data"
msgstr ""

# c6b459a98c3a41feaa539dd8d95f34ec
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_centroids_from_polygon_data:3
msgid ""
"Test against centroid data generated by QGIS: shapefiles with a _centroids."
"shp suffix."
msgstr ""

# d1a62e729af2443c82d7d14577872e58
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_compatible_projections:1
msgid "Projections that are compatible but not identical are recognised"
msgstr ""

# f94a4edac49b4ec2b596c23333c0fe71
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_compatible_projections:3
msgid "This is a test for issue #304"
msgstr ""

# 4a4341fef73241c7bcd697270a7ff5cc
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_donut_polygons:1
msgid "Donut polygon can be read, interpreted and written correctly"
msgstr ""

# 204f02966ed448d28a854792b814c6e9
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_empty_keywords_file:1
msgid "Empty keywords can be handled"
msgstr ""

# cff8176697d1486fbe3e7162a4f79f72
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_geotransform2bbox:1
msgid "Bounding box can be extracted from geotransform"
msgstr ""

# aebd419eaf94499caced9be86deaff07
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_geotransform2resolution:1
msgid "Resolution can be extracted from geotransform"
msgstr ""

# b8a566e9fee945408a7542d57fdd4b3d
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_get_bounding_box:1
msgid "Bounding box is correctly extracted from file."
msgstr ""

# d15a68634b3c45b9bef8cf39d2d635fa
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_get_bounding_box:3
msgid "Reference data::"
msgstr ""

# 01df88d4a2844be69516c34dabb50d37
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_get_bounding_box:44
msgid "( 99d21'36.00\"E,  0d 0' 0.01\"N)"
msgstr ""

# 1a23c015fb254d2c807c7190530e3b9e
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_get_bounding_box:46
msgid "( 99d21'36.00\"E,  2d11'56.40\"S)"
msgstr ""

# e1d5ba86dd864728a2f8b408b9443f67
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_get_bounding_box:48
msgid "(102d14'13.20\"E,  0d 0' 0.01\"N)"
msgstr ""

# b8c797e5975b435d9b445731a60e80a7
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_get_bounding_box:50
msgid "(102d14'13.20\"E,  2d11'56.40\"S)"
msgstr ""

# b0b9aad3d8794f2ba3e0dfe2c4df7815
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_get_bounding_box:52
msgid "(100d47'54.60\"E,  1d 5'58.20\"S)"
msgstr ""

# 4ea619ef264547e181a3a5d757b09f5f
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_i18n:1
msgid ""
"Test to see if internationalisation is working correctly. Make sure to "
"include this file when using xgettext to scan for translatable strings. .. "
"see:: :doc:`/developer-docs/i18n`"
msgstr ""

# 9f81b63a7b494b09a367d521726643be
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_instantiation_of_empty_layers:1
msgid "Vector and Raster objects can be instantiated with None"
msgstr ""

# e1df3260d3124530a20eebf756448f52
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_keywords_file:1
msgid "Keywords can be written and read"
msgstr ""

# dffcf620e9a44fb79fc5ad8a2b27d5be
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_keywords_with_colon:1
msgid "Keywords and values with colons raise error messages"
msgstr ""

# f746f1bc69ad4fce9a5545ef3ae19d1c
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_layer_API:1
msgid "Vector and Raster instances have a similar API"
msgstr ""

# 110c64af56e04c4481eeb7558f41246c
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_line_to_points:1
msgid "Points along line are computed correctly"
msgstr ""

# 0424d5e794654d2399b1a6ffbb450a09
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_minimal_bounding_box:1
msgid "Bounding box minimal size can be controlled"
msgstr ""

# cdb93b625dfe440dbd7264ac00d4e25c
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_multipart_polygon_can_be_read:1
msgid "Multipart polygons are be converted to singlepart"
msgstr ""

# 2611df1b4b284d398c253dda1defa6b6
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_no_projection:1
msgid "Raster layers with no projection causes Exception to be raised"
msgstr ""

# 0663596f362e454eaf96e39a6259f517
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_nodata_value:1
msgid "NODATA value is correctly handled for GDAL layers"
msgstr ""

# 012a3df8c36942dcbdabec68bfc02561
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_ordering_polygon_vertices:1
msgid "Ordering of polygon vertices is preserved when writing and reading"
msgstr ""

# aeb3b7086bfd49b2a4558487e76172fe
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_polygon_area:1
msgid "Polygon areas are computed correctly"
msgstr ""

# 28808eb21ff844309ac2337ee5b0d5f9
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_polygon_centroids:1
msgid "Polygon centroids are computed correctly"
msgstr ""

# 87773aed83a04f99b5eb18e49b340269
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_polygons_with_inner_rings:1
msgid "Polygons with inner rings can be written and read"
msgstr ""

# 543edbf8aa8d48a4b1c77135547b3654
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_projection_comparisons:1
msgid "Projection information can be correctly compared"
msgstr ""

# b3220dfa3b1647329314c2db4d2dbd0f
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_raster_extrema:1
msgid "Raster extrema (including NAN's) are correct."
msgstr ""

# 937c03bd97374e06864091466a60d958
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_raster_to_vector_points:1
msgid "Raster layers can be converted to vector point layers"
msgstr ""

# 718a8d168c2b4a9c8a1ec1b7a1d4d4c3
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_raster_to_vector_points2:1
msgid "Raster layers can be converted to vector point layers (real data)"
msgstr ""

# fe309e8fb85a44929ed3c9a5176056f9
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_raster_to_vector_points2:3
msgid "# See qgis project in test data: raster_point_and_clipping_test.qgs"
msgstr ""

# 10564abe28ab42be9d081572627bb930
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_rasters_and_arrays:1
msgid "Consistency of rasters and associated arrays"
msgstr ""

# 0c5a18823a904a4fa977c4d049c7ecd7
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_rasters_created_with_projected_srs:1
msgid "Rasters can be created from arrays in projected coordinates"
msgstr ""

# 6b42a01dc7fc416d9145bb8e41b409de
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_reading_and_writing_of_real_rasters:1
msgid "Rasters can be read and written correctly in different formats"
msgstr ""

# 1a346e869f94482bb0949a8e3a60a9b5
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_reading_and_writing_of_vector_line_data:1
msgid "Vector line data can be read and written correctly"
msgstr ""

# 2e68a5673d3b46cf83e83cc50feec397
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_reading_and_writing_of_vector_point_data:1
msgid "Vector point data can be read and written correctly"
msgstr ""

# ecc808995bb34fb88c3c9f5fe0e7550f
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_reading_and_writing_of_vector_polygon_data:1
msgid "Vector polygon data can be read and written correctly"
msgstr ""

# 518e368335334b47b3b948c24af34364
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_vector_class:1
msgid "Consistency of vector class for point data"
msgstr ""

# 418854090d094827985c904714211ddf
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_vector_class_geometry_types:1
msgid "Admissible geometry types work in vector class"
msgstr ""

# 09406f425a664814852900cabebb6c4e
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_vector_class_geometry_types:3
msgid "Also check that reported bounding boxes are correct"
msgstr ""

# 92a7f61353a74493b7ef1f6ebbfbed43
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_vector_extrema:1
msgid "Vector extremum calculation works"
msgstr ""

# fbc66d90230e4cfc8befe42c1b5e2977
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.Test_IO.test_vector_feature_count:1
msgid "Number of features read from vector data is as expected"
msgstr ""

# 36df53457d854f3cb75c420ce6390e15
#: ../../../safe/storage/test_io.py:docstring of
#: safe.storage.test_io.linear_function:1
msgid "Auxiliary function for use with raster test"
msgstr ""

# 97df50837bb849a7a6777351ae1c0e38
#: ../../source/api-docs/safe/storage/test_io.rst:11
msgid "This module forms part of the `InaSAFE <http://inasafe.org>`_ tool."
msgstr ""
